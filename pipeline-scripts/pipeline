def mvnHome
def remote = [:]
         remote.name = 'ansible'
         remote.host = '172.31.53.52'
         remote.user = 'centos'
         remote.password = 'Rnstech@123'
         remote.allowAnyHosts = true
def remote1 = [:]
    	remote1.name = 'kops'
    	remote1.host = '172.31.52.107'
    	remote1.user = 'centos'
    	remote1.password = 'Rnstech@123'
    	remote1.allowAnyHosts = true

pipeline {
   agent none
    
   stages {
      stage('Prepare Workspace') {
         agent {
              label 'slave'
          }
         steps {
            // Get src code from a GitHub repository
	    
	    git credentialsId: '7e19dc41-41ae-4cd6-8e00-6da9fa72b511', url: 'https://github.com/raju151190/Maven-Java-Project.git'
            stash 'Source'
            script{
                mvnHome = tool name: 'maven3', type: 'maven'
            }      
      }   
      }
      
      stage('Setup Tools'){
         agent {
              label 'slave'
          }
          steps{
          
            sshCommand remote: remote, command: 'cd Maven-Java-Project; git pull'
            sshCommand remote: remote, command: 'cd Maven-Java-Project; ansible-playbook -i hosts tools/sonarqube/sonar-install.yaml'
            sshCommand remote: remote, command: 'cd Maven-Java-Project; ansible-playbook -i hosts tools/docker/docker-install.yml'

            //K8s Setup
            sshCommand remote: remote1, command: "cd Maven-Java-Project; git pull"
	    sshCommand remote: remote1, command: "kubectl apply -f Maven-Java-Project/k8s-code/staging/namespace/staging-ns.yml"
	    sshCommand remote: remote1, command: "kubectl apply -f Maven-Java-Project/k8s-code/prod/namespace/prod-ns.yml"
          }
      }      
      stage('SonarQube analysis') {
         agent {
              label 'slave'
          }
          steps{
                echo "Sonar Scanner"
                  sh "${mvnHome}/bin/mvn clean compile"
                withSonarQubeEnv('sonar-7') { 
                  // sh "${mvnHome}/bin/mvn sonar:sonar "
                }                     
          }
      }
      
      stage('Unit Test Cases') {
         agent {
              label 'slave'
          }
          steps{
              sh "${mvnHome}/bin/mvn clean test"  
          }
          post{
              success{
                  junit 'target/surefire-reports/*.xml'
              }
          }
      }
      
       stage('Build Code') {
         agent {
              label 'slave'
          }
          steps{
	      unstash 'Source'
              sh "${mvnHome}/bin/mvn clean package"  
          }
          post{
              success{
                  archiveArtifacts '**/*.war'
              }
          }
      }
      
    stage('Build Docker Image') {
         agent {
                  label 'slave'
         }
         steps{
                  sh "docker build -t gvenkat/batch22 ."  
         }
     }
     
     stage('Publish Docker Image') {
         agent {
                  label 'slave'
         }
    steps{

    	withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'dockerPassword', usernameVariable: 'dockerUser')]) {
    		sh "docker login -u ${dockerUser} -p ${dockerPassword}"
	}
        	sh "docker push gvenkat/batch22"
    }
    }

    stage('Deploy to Staging') {
	agent {
	      label 'slave'
	}
	steps{
	      //Deploy to K8s Cluster 
              echo "Deploy to Staging Server"
	      sshCommand remote: remote1, command: "cd Maven-Java-Project; git pull"
	      sshCommand remote: remote1, command: "kubectl apply -f Maven-Java-Project/k8s-code/staging/app/."
	}		    
    }

    stage ('Integration-Test') {
	agent {
		label "slave"
        }
	steps {
             echo "Run Integration Test Cases"
             unstash 'Source'
            sh "'${mvnHome}/bin/mvn' clean verify"
        }
    }

    stage ('approve') {
	agent {
        	label "slave"
        }
	steps {
		echo "Approval State"
                timeout(time: 7, unit: 'DAYS') {                    
			input message: 'Do you want to deploy?', submitter: 'admin'
		}
	}
     }

    stage ('Prod-Deploy') {
	agent {
		label "slave"
        }
	steps{
              echo "Deploy to Production"
	      //Deploy to Prod K8s Cluster
	      sshCommand remote: remote1, command: "cd Maven-Java-Project; git pull"
	      sshCommand remote: remote1, command: "kubectl apply -f Maven-Java-Project/k8s-code/prod/app/."
	}
	}
   }
}
